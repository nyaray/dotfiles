" Preamble

if ! has("gui_running")
    scriptencoding utf-8
    set encoding=utf-8
endif

set nocompatible
filetype off

" Follow the leader
let mapleader="\\"

" Autocommands
autocmd BufNewFile,BufRead *.md set filetype=markdown

set backup

if has("unix")  " AWE YEEAAH
    set directory=~/.vimfiles/swap
    set backupdir=~/.vimfiles/backup

    set rtp+=~/.vimfiles/bundle/Vundle.vim
    call vundle#begin('~/.vimfiles/bundle')

    let s:uname = system("uname")
    if s:uname == "Darwin\n"
        " os x
    elseif s:uname == "Linux\n"
        " not os x
    endif
elseif has("win32")  " Windahz stuff

    cd $HOME
    set directory=C:\\Users\\emilio.nyaray\\.vim\\swapfiles
    set backupdir=C:\\Users\\emilio.nyaray\\.vim\\backupdir

    set rtp+=~/vimfiles/bundle/Vundle.vim//
    call vundle#begin('~/vimfiles/bundle')
else
endif

Plugin 'VundleVim/Vundle.vim'

Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'rakr/vim-one'

Plugin 'powerman/vim-plugin-AnsiEsc'

" Editing, motions and file handling
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'emezeske/paredit.vim'
Plugin 'tpope/vim-surround'
Plugin 'junegunn/vim-easy-align'

Plugin 'easymotion/vim-easymotion'

Plugin 'ctrlpvim/ctrlp.vim'

" Elixir
Plugin 'elixir-lang/vim-elixir'
Plugin 'slashmili/alchemist.vim'

" Erlang
Plugin 'vim-erlang/vim-erlang-runtime'

" Lisp-flavoured Erlang
Plugin 'lfe-support/vim-lfe'

" Clojure
Plugin 'guns/vim-clojure-static'
Plugin 'tpope/vim-fireplace'
Plugin 'guns/vim-clojure-highlight'

" PlantUML
Plugin 'aklt/plantuml-syntax'

" Menu bar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end() " required after vundle, no more Plugin calls

filetype plugin indent on

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" rainbow_parentheses.vim, Clojure hax
autocmd Syntax lfe RainbowParenthesesLoadRound
autocmd Syntax clojure EnableSyntaxExtension


" vim-clojure-static
let g:clojure_align_subforms = 1

" vim-airline
"let g:airline_theme='bubblegum'
"let g:airline_theme='light'
let g:airline_theme='one'
let g:airline#extensions#tabline#enabled=1

set fileformats=unix,dos,mac

set number relativenumber
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

set list  " Print unprintables

set listchars=tab:>-,trail:.

set visualbell  " Bell, shut up!
set showmatch  " Matching parens
set colorcolumn=80  " 80 char line
set textwidth=80  " Set wrap width etc
set wrapmargin=2  " Wrap 2 chars before

set autoread  " Ask to reload buffers as soon as changes are detected

"           +--Disable hlsearch while loading viminfo
"           | +--Remember marks for last 500 files
"           | |    +--Remember up to 10000 lines in each register
"           | |    |      +--Remember up to 1MB in each register
"           | |    |      |     +--Remember last 1000 search patterns
"           | |    |      |     |     +---Remember last 1000 commands
"           | |    |      |     |     |
"           v v    v      v     v     v
set viminfo=h,'500,<10000,s1000,/1000,:1000

set wildmode=list:longest,full  " List all matches, longest first
set infercase  " Infer case for completions
set noshowmode  " Don't print mode changes in the command prompt

set title  " Set window title
set titleold=

" Editor behaviours
set hidden  " allow editing multiple buffers

" Editing behaviours
set backspace=indent,eol,start  " make backspace eat all of these!
set autoindent  " auto indent
set smartindent  " indent on newline
set expandtab  " spaces >>> tabs
set smarttab
set shiftround
set tabstop=4  " tabs=4spaces
set shiftwidth=4  " shift things by one tab
set laststatus=2  " get the statusline to work

" EasyAlign, visual mode + motion/text objects
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Search options
set hlsearch
set ignorecase
set smartcase
set incsearch
set nowrapscan

"nnoremap <Leader>n <SID>SearchMode()<CR>
nnoremap n nzz
nnoremap N Nzz
nnoremap g* g*zz
nnoremap g# g#zz

" search for visual selection
nnoremap * /\<<C-R>=expand('<cword>')<CR>\><CR>zz
nnoremap # ?\<<C-R>=expand('<cword>')<CR>\><CR>zz

" yank visual selection
vnoremap // y/<C-R>"<CR>
" remove hilighting on double esc
nnoremap <Esc><Esc> :nohlsearch<CR>

" vim-fireplace
autocmd Syntax clojure map <Leader>r :%Eval<CR>

" vim-easymotion
map <Leader>h <Plug>(easymotion-linebackward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>l <Plug>(easymotion-lineforward)

let g:EasyMotion_startofline = 0  " don't change columns

" Remaps
nnoremap ; :
vmap <BS> x

" Shortcuts
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Visible stuff
set showcmd
syntax enable
set t_Co=256
"colorscheme Tomorrow-Night-Eighties
colorscheme one
"set background=dark
set background=light

" One last thing...
set mouse=a

